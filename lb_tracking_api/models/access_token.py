# coding: utf-8

"""
    TrackingAPI

    API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccessToken(dict):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ttl': 'float',
        'scopes': 'list[str]',
        'created': 'datetime',
        'user_id': 'float'
    }

    attribute_map = {
        'id': 'id',
        'ttl': 'ttl',
        'scopes': 'scopes',
        'created': 'created',
        'user_id': 'userId'
    }

    def __init__(self, id=None, ttl=None, scopes=None, created=None, user_id=None):  # noqa: E501
        """AccessToken - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._ttl = None
        self._scopes = None
        self._created = None
        self._user_id = None
        self.discriminator = None

        self.id = id
        if ttl is not None:
            self.ttl = ttl
        if scopes is not None:
            self.scopes = scopes
        if created is not None:
            self.created = created
        if user_id is not None:
            self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this AccessToken.  # noqa: E501


        :return: The id of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccessToken.


        :param id: The id of this AccessToken.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ttl(self):
        """Gets the ttl of this AccessToken.  # noqa: E501

        time to live in seconds (2 weeks by default)  # noqa: E501

        :return: The ttl of this AccessToken.  # noqa: E501
        :rtype: float
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this AccessToken.

        time to live in seconds (2 weeks by default)  # noqa: E501

        :param ttl: The ttl of this AccessToken.  # noqa: E501
        :type: float
        """

        self._ttl = ttl

    @property
    def scopes(self):
        """Gets the scopes of this AccessToken.  # noqa: E501

        Array of scopes granted to this access token.  # noqa: E501

        :return: The scopes of this AccessToken.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AccessToken.

        Array of scopes granted to this access token.  # noqa: E501

        :param scopes: The scopes of this AccessToken.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def created(self):
        """Gets the created of this AccessToken.  # noqa: E501


        :return: The created of this AccessToken.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AccessToken.


        :param created: The created of this AccessToken.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def user_id(self):
        """Gets the user_id of this AccessToken.  # noqa: E501


        :return: The user_id of this AccessToken.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccessToken.


        :param user_id: The user_id of this AccessToken.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    TrackingAPI

    API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Device(dict):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'imei': 'str',
        'iccid': 'str',
        'imsi': 'str',
        'bt_mac_address': 'str',
        'serial': 'str',
        'type': 'str',
        'expires': 'datetime',
        'last_connection': 'datetime',
        'first_seen': 'datetime',
        'mode': 'str',
        'name': 'str',
        'battery_voltage': 'float',
        'battery_type': 'str',
        'tags': 'list[str]',
        'current_mode': 'float',
        'color': 'str',
        'save_to_web': 'bool',
        'active': 'bool',
        'deep_sleep': 'bool',
        'simstate': 'str',
        'stripe_subscription': 'str',
        'subscription_type': 'str',
        'meta': 'object',
        'id': 'float',
        'owner_id': 'float',
        'secure_phone_id': 'float',
        'reseller_id': 'float',
        'reseller_plan_id': 'float'
    }

    attribute_map = {
        'imei': 'imei',
        'iccid': 'iccid',
        'imsi': 'imsi',
        'bt_mac_address': 'btMacAddress',
        'serial': 'serial',
        'type': 'type',
        'expires': 'expires',
        'last_connection': 'lastConnection',
        'first_seen': 'firstSeen',
        'mode': 'mode',
        'name': 'name',
        'battery_voltage': 'batteryVoltage',
        'battery_type': 'batteryType',
        'tags': 'tags',
        'current_mode': 'currentMode',
        'color': 'color',
        'save_to_web': 'saveToWeb',
        'active': 'active',
        'deep_sleep': 'deepSleep',
        'simstate': 'simstate',
        'stripe_subscription': 'stripeSubscription',
        'subscription_type': 'subscriptionType',
        'meta': 'meta',
        'id': 'id',
        'owner_id': 'ownerId',
        'secure_phone_id': 'securePhoneId',
        'reseller_id': 'resellerId',
        'reseller_plan_id': 'resellerPlanId'
    }

    def __init__(self, imei=None, iccid=None, imsi=None, bt_mac_address=None, serial=None, type=None, expires=None, last_connection=None, first_seen=None, mode='default', name=None, battery_voltage=None, battery_type='LIO', tags=None, current_mode=None, color='fc7c3d', save_to_web=False, active=False, deep_sleep=False, simstate='active', stripe_subscription=None, subscription_type=None, meta=None, id=None, owner_id=None, secure_phone_id=None, reseller_id=None, reseller_plan_id=None):  # noqa: E501
        """Device - a model defined in Swagger"""  # noqa: E501

        self._imei = None
        self._iccid = None
        self._imsi = None
        self._bt_mac_address = None
        self._serial = None
        self._type = None
        self._expires = None
        self._last_connection = None
        self._first_seen = None
        self._mode = None
        self._name = None
        self._battery_voltage = None
        self._battery_type = None
        self._tags = None
        self._current_mode = None
        self._color = None
        self._save_to_web = None
        self._active = None
        self._deep_sleep = None
        self._simstate = None
        self._stripe_subscription = None
        self._subscription_type = None
        self._meta = None
        self._id = None
        self._owner_id = None
        self._secure_phone_id = None
        self._reseller_id = None
        self._reseller_plan_id = None
        self.discriminator = None

        self.imei = imei
        self.iccid = iccid
        if imsi is not None:
            self.imsi = imsi
        if bt_mac_address is not None:
            self.bt_mac_address = bt_mac_address
        if serial is not None:
            self.serial = serial
        if type is not None:
            self.type = type
        if expires is not None:
            self.expires = expires
        if last_connection is not None:
            self.last_connection = last_connection
        self.first_seen = first_seen
        self.mode = mode
        if name is not None:
            self.name = name
        if battery_voltage is not None:
            self.battery_voltage = battery_voltage
        if battery_type is not None:
            self.battery_type = battery_type
        if tags is not None:
            self.tags = tags
        if current_mode is not None:
            self.current_mode = current_mode
        if color is not None:
            self.color = color
        if save_to_web is not None:
            self.save_to_web = save_to_web
        if active is not None:
            self.active = active
        if deep_sleep is not None:
            self.deep_sleep = deep_sleep
        if simstate is not None:
            self.simstate = simstate
        if stripe_subscription is not None:
            self.stripe_subscription = stripe_subscription
        if subscription_type is not None:
            self.subscription_type = subscription_type
        if meta is not None:
            self.meta = meta
        if id is not None:
            self.id = id
        if owner_id is not None:
            self.owner_id = owner_id
        if secure_phone_id is not None:
            self.secure_phone_id = secure_phone_id
        if reseller_id is not None:
            self.reseller_id = reseller_id
        if reseller_plan_id is not None:
            self.reseller_plan_id = reseller_plan_id

    @property
    def imei(self):
        """Gets the imei of this Device.  # noqa: E501


        :return: The imei of this Device.  # noqa: E501
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this Device.


        :param imei: The imei of this Device.  # noqa: E501
        :type: str
        """
        if imei is None:
            raise ValueError("Invalid value for `imei`, must not be `None`")  # noqa: E501
        if imei is not None and len(imei) > 15:
            raise ValueError("Invalid value for `imei`, length must be less than or equal to `15`")  # noqa: E501

        self._imei = imei

    @property
    def iccid(self):
        """Gets the iccid of this Device.  # noqa: E501


        :return: The iccid of this Device.  # noqa: E501
        :rtype: str
        """
        return self._iccid

    @iccid.setter
    def iccid(self, iccid):
        """Sets the iccid of this Device.


        :param iccid: The iccid of this Device.  # noqa: E501
        :type: str
        """
        if iccid is None:
            raise ValueError("Invalid value for `iccid`, must not be `None`")  # noqa: E501

        self._iccid = iccid

    @property
    def imsi(self):
        """Gets the imsi of this Device.  # noqa: E501


        :return: The imsi of this Device.  # noqa: E501
        :rtype: str
        """
        return self._imsi

    @imsi.setter
    def imsi(self, imsi):
        """Sets the imsi of this Device.


        :param imsi: The imsi of this Device.  # noqa: E501
        :type: str
        """

        self._imsi = imsi

    @property
    def bt_mac_address(self):
        """Gets the bt_mac_address of this Device.  # noqa: E501


        :return: The bt_mac_address of this Device.  # noqa: E501
        :rtype: str
        """
        return self._bt_mac_address

    @bt_mac_address.setter
    def bt_mac_address(self, bt_mac_address):
        """Sets the bt_mac_address of this Device.


        :param bt_mac_address: The bt_mac_address of this Device.  # noqa: E501
        :type: str
        """
        if bt_mac_address is not None and len(bt_mac_address) > 17:
            raise ValueError("Invalid value for `bt_mac_address`, length must be less than or equal to `17`")  # noqa: E501

        self._bt_mac_address = bt_mac_address

    @property
    def serial(self):
        """Gets the serial of this Device.  # noqa: E501


        :return: The serial of this Device.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Device.


        :param serial: The serial of this Device.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def type(self):
        """Gets the type of this Device.  # noqa: E501


        :return: The type of this Device.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Device.


        :param type: The type of this Device.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def expires(self):
        """Gets the expires of this Device.  # noqa: E501


        :return: The expires of this Device.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this Device.


        :param expires: The expires of this Device.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def last_connection(self):
        """Gets the last_connection of this Device.  # noqa: E501


        :return: The last_connection of this Device.  # noqa: E501
        :rtype: datetime
        """
        return self._last_connection

    @last_connection.setter
    def last_connection(self, last_connection):
        """Sets the last_connection of this Device.


        :param last_connection: The last_connection of this Device.  # noqa: E501
        :type: datetime
        """

        self._last_connection = last_connection

    @property
    def first_seen(self):
        """Gets the first_seen of this Device.  # noqa: E501


        :return: The first_seen of this Device.  # noqa: E501
        :rtype: datetime
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this Device.


        :param first_seen: The first_seen of this Device.  # noqa: E501
        :type: datetime
        """
        if first_seen is None:
            raise ValueError("Invalid value for `first_seen`, must not be `None`")  # noqa: E501

        self._first_seen = first_seen

    @property
    def mode(self):
        """Gets the mode of this Device.  # noqa: E501


        :return: The mode of this Device.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Device.


        :param mode: The mode of this Device.  # noqa: E501
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def name(self):
        """Gets the name of this Device.  # noqa: E501


        :return: The name of this Device.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Device.


        :param name: The name of this Device.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def battery_voltage(self):
        """Gets the battery_voltage of this Device.  # noqa: E501


        :return: The battery_voltage of this Device.  # noqa: E501
        :rtype: float
        """
        return self._battery_voltage

    @battery_voltage.setter
    def battery_voltage(self, battery_voltage):
        """Sets the battery_voltage of this Device.


        :param battery_voltage: The battery_voltage of this Device.  # noqa: E501
        :type: float
        """

        self._battery_voltage = battery_voltage

    @property
    def battery_type(self):
        """Gets the battery_type of this Device.  # noqa: E501


        :return: The battery_type of this Device.  # noqa: E501
        :rtype: str
        """
        return self._battery_type

    @battery_type.setter
    def battery_type(self, battery_type):
        """Sets the battery_type of this Device.


        :param battery_type: The battery_type of this Device.  # noqa: E501
        :type: str
        """

        self._battery_type = battery_type

    @property
    def tags(self):
        """Gets the tags of this Device.  # noqa: E501


        :return: The tags of this Device.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Device.


        :param tags: The tags of this Device.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def current_mode(self):
        """Gets the current_mode of this Device.  # noqa: E501


        :return: The current_mode of this Device.  # noqa: E501
        :rtype: float
        """
        return self._current_mode

    @current_mode.setter
    def current_mode(self, current_mode):
        """Sets the current_mode of this Device.


        :param current_mode: The current_mode of this Device.  # noqa: E501
        :type: float
        """

        self._current_mode = current_mode

    @property
    def color(self):
        """Gets the color of this Device.  # noqa: E501


        :return: The color of this Device.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Device.


        :param color: The color of this Device.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def save_to_web(self):
        """Gets the save_to_web of this Device.  # noqa: E501


        :return: The save_to_web of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._save_to_web

    @save_to_web.setter
    def save_to_web(self, save_to_web):
        """Sets the save_to_web of this Device.


        :param save_to_web: The save_to_web of this Device.  # noqa: E501
        :type: bool
        """

        self._save_to_web = save_to_web

    @property
    def active(self):
        """Gets the active of this Device.  # noqa: E501


        :return: The active of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Device.


        :param active: The active of this Device.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def deep_sleep(self):
        """Gets the deep_sleep of this Device.  # noqa: E501


        :return: The deep_sleep of this Device.  # noqa: E501
        :rtype: bool
        """
        return self._deep_sleep

    @deep_sleep.setter
    def deep_sleep(self, deep_sleep):
        """Sets the deep_sleep of this Device.


        :param deep_sleep: The deep_sleep of this Device.  # noqa: E501
        :type: bool
        """

        self._deep_sleep = deep_sleep

    @property
    def simstate(self):
        """Gets the simstate of this Device.  # noqa: E501


        :return: The simstate of this Device.  # noqa: E501
        :rtype: str
        """
        return self._simstate

    @simstate.setter
    def simstate(self, simstate):
        """Sets the simstate of this Device.


        :param simstate: The simstate of this Device.  # noqa: E501
        :type: str
        """

        self._simstate = simstate

    @property
    def stripe_subscription(self):
        """Gets the stripe_subscription of this Device.  # noqa: E501


        :return: The stripe_subscription of this Device.  # noqa: E501
        :rtype: str
        """
        return self._stripe_subscription

    @stripe_subscription.setter
    def stripe_subscription(self, stripe_subscription):
        """Sets the stripe_subscription of this Device.


        :param stripe_subscription: The stripe_subscription of this Device.  # noqa: E501
        :type: str
        """

        self._stripe_subscription = stripe_subscription

    @property
    def subscription_type(self):
        """Gets the subscription_type of this Device.  # noqa: E501


        :return: The subscription_type of this Device.  # noqa: E501
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this Device.


        :param subscription_type: The subscription_type of this Device.  # noqa: E501
        :type: str
        """

        self._subscription_type = subscription_type

    @property
    def meta(self):
        """Gets the meta of this Device.  # noqa: E501


        :return: The meta of this Device.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Device.


        :param meta: The meta of this Device.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def id(self):
        """Gets the id of this Device.  # noqa: E501


        :return: The id of this Device.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Device.


        :param id: The id of this Device.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def owner_id(self):
        """Gets the owner_id of this Device.  # noqa: E501


        :return: The owner_id of this Device.  # noqa: E501
        :rtype: float
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Device.


        :param owner_id: The owner_id of this Device.  # noqa: E501
        :type: float
        """

        self._owner_id = owner_id

    @property
    def secure_phone_id(self):
        """Gets the secure_phone_id of this Device.  # noqa: E501


        :return: The secure_phone_id of this Device.  # noqa: E501
        :rtype: float
        """
        return self._secure_phone_id

    @secure_phone_id.setter
    def secure_phone_id(self, secure_phone_id):
        """Sets the secure_phone_id of this Device.


        :param secure_phone_id: The secure_phone_id of this Device.  # noqa: E501
        :type: float
        """

        self._secure_phone_id = secure_phone_id

    @property
    def reseller_id(self):
        """Gets the reseller_id of this Device.  # noqa: E501


        :return: The reseller_id of this Device.  # noqa: E501
        :rtype: float
        """
        return self._reseller_id

    @reseller_id.setter
    def reseller_id(self, reseller_id):
        """Sets the reseller_id of this Device.


        :param reseller_id: The reseller_id of this Device.  # noqa: E501
        :type: float
        """

        self._reseller_id = reseller_id

    @property
    def reseller_plan_id(self):
        """Gets the reseller_plan_id of this Device.  # noqa: E501


        :return: The reseller_plan_id of this Device.  # noqa: E501
        :rtype: float
        """
        return self._reseller_plan_id

    @reseller_plan_id.setter
    def reseller_plan_id(self, reseller_plan_id):
        """Sets the reseller_plan_id of this Device.


        :param reseller_plan_id: The reseller_plan_id of this Device.  # noqa: E501
        :type: float
        """

        self._reseller_plan_id = reseller_plan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Device, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    TrackingAPI

    API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'str',
        'message': 'str',
        'mobile_terminated': 'bool',
        'created': 'datetime',
        'sent': 'datetime',
        'id': 'float',
        'device_id': 'float',
        'user_id': 'float'
    }

    attribute_map = {
        'config': 'config',
        'message': 'message',
        'mobile_terminated': 'mobileTerminated',
        'created': 'created',
        'sent': 'sent',
        'id': 'id',
        'device_id': 'deviceId',
        'user_id': 'userId'
    }

    def __init__(self, config=None, message=None, mobile_terminated=True, created=None, sent=None, id=None, device_id=None, user_id=None):  # noqa: E501
        """DeviceMessage - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._message = None
        self._mobile_terminated = None
        self._created = None
        self._sent = None
        self._id = None
        self._device_id = None
        self._user_id = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if message is not None:
            self.message = message
        if mobile_terminated is not None:
            self.mobile_terminated = mobile_terminated
        self.created = created
        if sent is not None:
            self.sent = sent
        if id is not None:
            self.id = id
        if device_id is not None:
            self.device_id = device_id
        if user_id is not None:
            self.user_id = user_id

    @property
    def config(self):
        """Gets the config of this DeviceMessage.  # noqa: E501


        :return: The config of this DeviceMessage.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DeviceMessage.


        :param config: The config of this DeviceMessage.  # noqa: E501
        :type: str
        """
        if config is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', config):  # noqa: E501
            raise ValueError(r"Invalid value for `config`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._config = config

    @property
    def message(self):
        """Gets the message of this DeviceMessage.  # noqa: E501


        :return: The message of this DeviceMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DeviceMessage.


        :param message: The message of this DeviceMessage.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def mobile_terminated(self):
        """Gets the mobile_terminated of this DeviceMessage.  # noqa: E501


        :return: The mobile_terminated of this DeviceMessage.  # noqa: E501
        :rtype: bool
        """
        return self._mobile_terminated

    @mobile_terminated.setter
    def mobile_terminated(self, mobile_terminated):
        """Sets the mobile_terminated of this DeviceMessage.


        :param mobile_terminated: The mobile_terminated of this DeviceMessage.  # noqa: E501
        :type: bool
        """

        self._mobile_terminated = mobile_terminated

    @property
    def created(self):
        """Gets the created of this DeviceMessage.  # noqa: E501


        :return: The created of this DeviceMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DeviceMessage.


        :param created: The created of this DeviceMessage.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def sent(self):
        """Gets the sent of this DeviceMessage.  # noqa: E501


        :return: The sent of this DeviceMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this DeviceMessage.


        :param sent: The sent of this DeviceMessage.  # noqa: E501
        :type: datetime
        """

        self._sent = sent

    @property
    def id(self):
        """Gets the id of this DeviceMessage.  # noqa: E501


        :return: The id of this DeviceMessage.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceMessage.


        :param id: The id of this DeviceMessage.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this DeviceMessage.  # noqa: E501


        :return: The device_id of this DeviceMessage.  # noqa: E501
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceMessage.


        :param device_id: The device_id of this DeviceMessage.  # noqa: E501
        :type: float
        """

        self._device_id = device_id

    @property
    def user_id(self):
        """Gets the user_id of this DeviceMessage.  # noqa: E501


        :return: The user_id of this DeviceMessage.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DeviceMessage.


        :param user_id: The user_id of this DeviceMessage.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

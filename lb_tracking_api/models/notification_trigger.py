# coding: utf-8

"""
    TrackingAPI

    API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NotificationTrigger(dict):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'parameters': 'object',
        'mute_for': 'float',
        'last_triggered': 'datetime',
        'delivery': 'object',
        'id': 'float',
        'device_id': 'float',
        'user_id': 'float'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'parameters': 'parameters',
        'mute_for': 'muteFor',
        'last_triggered': 'lastTriggered',
        'delivery': 'delivery',
        'id': 'id',
        'device_id': 'deviceId',
        'user_id': 'userId'
    }

    def __init__(self, name=None, type=None, parameters=None, mute_for=None, last_triggered=None, delivery=None, id=None, device_id=None, user_id=None):  # noqa: E501
        """NotificationTrigger - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._parameters = None
        self._mute_for = None
        self._last_triggered = None
        self._delivery = None
        self._id = None
        self._device_id = None
        self._user_id = None
        self.discriminator = None

        self.name = name
        self.type = type
        if parameters is not None:
            self.parameters = parameters
        self.mute_for = mute_for
        if last_triggered is not None:
            self.last_triggered = last_triggered
        self.delivery = delivery
        if id is not None:
            self.id = id
        if device_id is not None:
            self.device_id = device_id
        if user_id is not None:
            self.user_id = user_id

    @property
    def name(self):
        """Gets the name of this NotificationTrigger.  # noqa: E501


        :return: The name of this NotificationTrigger.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationTrigger.


        :param name: The name of this NotificationTrigger.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this NotificationTrigger.  # noqa: E501


        :return: The type of this NotificationTrigger.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationTrigger.


        :param type: The type of this NotificationTrigger.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def parameters(self):
        """Gets the parameters of this NotificationTrigger.  # noqa: E501


        :return: The parameters of this NotificationTrigger.  # noqa: E501
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this NotificationTrigger.


        :param parameters: The parameters of this NotificationTrigger.  # noqa: E501
        :type: object
        """

        self._parameters = parameters

    @property
    def mute_for(self):
        """Gets the mute_for of this NotificationTrigger.  # noqa: E501


        :return: The mute_for of this NotificationTrigger.  # noqa: E501
        :rtype: float
        """
        return self._mute_for

    @mute_for.setter
    def mute_for(self, mute_for):
        """Sets the mute_for of this NotificationTrigger.


        :param mute_for: The mute_for of this NotificationTrigger.  # noqa: E501
        :type: float
        """
        if mute_for is None:
            raise ValueError("Invalid value for `mute_for`, must not be `None`")  # noqa: E501

        self._mute_for = mute_for

    @property
    def last_triggered(self):
        """Gets the last_triggered of this NotificationTrigger.  # noqa: E501


        :return: The last_triggered of this NotificationTrigger.  # noqa: E501
        :rtype: datetime
        """
        return self._last_triggered

    @last_triggered.setter
    def last_triggered(self, last_triggered):
        """Sets the last_triggered of this NotificationTrigger.


        :param last_triggered: The last_triggered of this NotificationTrigger.  # noqa: E501
        :type: datetime
        """

        self._last_triggered = last_triggered

    @property
    def delivery(self):
        """Gets the delivery of this NotificationTrigger.  # noqa: E501


        :return: The delivery of this NotificationTrigger.  # noqa: E501
        :rtype: object
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this NotificationTrigger.


        :param delivery: The delivery of this NotificationTrigger.  # noqa: E501
        :type: object
        """
        if delivery is None:
            raise ValueError("Invalid value for `delivery`, must not be `None`")  # noqa: E501

        self._delivery = delivery

    @property
    def id(self):
        """Gets the id of this NotificationTrigger.  # noqa: E501


        :return: The id of this NotificationTrigger.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationTrigger.


        :param id: The id of this NotificationTrigger.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this NotificationTrigger.  # noqa: E501


        :return: The device_id of this NotificationTrigger.  # noqa: E501
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this NotificationTrigger.


        :param device_id: The device_id of this NotificationTrigger.  # noqa: E501
        :type: float
        """

        self._device_id = device_id

    @property
    def user_id(self):
        """Gets the user_id of this NotificationTrigger.  # noqa: E501


        :return: The user_id of this NotificationTrigger.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NotificationTrigger.


        :param user_id: The user_id of this NotificationTrigger.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationTrigger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationTrigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

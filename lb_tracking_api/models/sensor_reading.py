# coding: utf-8

"""
    TrackingAPI

    API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lb_tracking_api.configuration import Configuration


class SensorReading(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'created': 'datetime',
        'type': 'str',
        'value': 'object',
        'rssi': 'float',
        'meta': 'object',
        'related_id': 'float',
        'correlation_id': 'str',
        'id': 'float',
        'gateway_id': 'float',
        'device_id': 'float',
        'sensor_device_id': 'str',
        'datapoint_id': 'float'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'created': 'created',
        'type': 'type',
        'value': 'value',
        'rssi': 'rssi',
        'meta': 'meta',
        'related_id': 'relatedId',
        'correlation_id': 'correlationId',
        'id': 'id',
        'gateway_id': 'gatewayId',
        'device_id': 'deviceId',
        'sensor_device_id': 'sensorDeviceId',
        'datapoint_id': 'datapointId'
    }

    def __init__(self, timestamp=None, created=None, type=None, value=None, rssi=None, meta=None, related_id=None, correlation_id=None, id=None, gateway_id=None, device_id=None, sensor_device_id=None, datapoint_id=None, _configuration=None):  # noqa: E501
        """SensorReading - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._timestamp = None
        self._created = None
        self._type = None
        self._value = None
        self._rssi = None
        self._meta = None
        self._related_id = None
        self._correlation_id = None
        self._id = None
        self._gateway_id = None
        self._device_id = None
        self._sensor_device_id = None
        self._datapoint_id = None
        self.discriminator = None

        self.timestamp = timestamp
        self.created = created
        self.type = type
        self.value = value
        if rssi is not None:
            self.rssi = rssi
        if meta is not None:
            self.meta = meta
        if related_id is not None:
            self.related_id = related_id
        if correlation_id is not None:
            self.correlation_id = correlation_id
        if id is not None:
            self.id = id
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if device_id is not None:
            self.device_id = device_id
        if sensor_device_id is not None:
            self.sensor_device_id = sensor_device_id
        if datapoint_id is not None:
            self.datapoint_id = datapoint_id

    @property
    def timestamp(self):
        """Gets the timestamp of this SensorReading.  # noqa: E501

        Timestamp for the reading  # noqa: E501

        :return: The timestamp of this SensorReading.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SensorReading.

        Timestamp for the reading  # noqa: E501

        :param timestamp: The timestamp of this SensorReading.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def created(self):
        """Gets the created of this SensorReading.  # noqa: E501

        Timestamp for the writing to db  # noqa: E501

        :return: The created of this SensorReading.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SensorReading.

        Timestamp for the writing to db  # noqa: E501

        :param created: The created of this SensorReading.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def type(self):
        """Gets the type of this SensorReading.  # noqa: E501

        Sensor type: 'ultra' (fill level), 'temp' (temperature), ...  # noqa: E501

        :return: The type of this SensorReading.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SensorReading.

        Sensor type: 'ultra' (fill level), 'temp' (temperature), ...  # noqa: E501

        :param type: The type of this SensorReading.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def value(self):
        """Gets the value of this SensorReading.  # noqa: E501

        JSON value  # noqa: E501

        :return: The value of this SensorReading.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SensorReading.

        JSON value  # noqa: E501

        :param value: The value of this SensorReading.  # noqa: E501
        :type: object
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def rssi(self):
        """Gets the rssi of this SensorReading.  # noqa: E501

        RSSI if from secondary wireless device  # noqa: E501

        :return: The rssi of this SensorReading.  # noqa: E501
        :rtype: float
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this SensorReading.

        RSSI if from secondary wireless device  # noqa: E501

        :param rssi: The rssi of this SensorReading.  # noqa: E501
        :type: float
        """

        self._rssi = rssi

    @property
    def meta(self):
        """Gets the meta of this SensorReading.  # noqa: E501

        JSON metadata  # noqa: E501

        :return: The meta of this SensorReading.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this SensorReading.

        JSON metadata  # noqa: E501

        :param meta: The meta of this SensorReading.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def related_id(self):
        """Gets the related_id of this SensorReading.  # noqa: E501

        LoraId of another (ie for signal strength)  # noqa: E501

        :return: The related_id of this SensorReading.  # noqa: E501
        :rtype: float
        """
        return self._related_id

    @related_id.setter
    def related_id(self, related_id):
        """Sets the related_id of this SensorReading.

        LoraId of another (ie for signal strength)  # noqa: E501

        :param related_id: The related_id of this SensorReading.  # noqa: E501
        :type: float
        """

        self._related_id = related_id

    @property
    def correlation_id(self):
        """Gets the correlation_id of this SensorReading.  # noqa: E501

        Internal use - correlation identifier  # noqa: E501

        :return: The correlation_id of this SensorReading.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this SensorReading.

        Internal use - correlation identifier  # noqa: E501

        :param correlation_id: The correlation_id of this SensorReading.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def id(self):
        """Gets the id of this SensorReading.  # noqa: E501


        :return: The id of this SensorReading.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SensorReading.


        :param id: The id of this SensorReading.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def gateway_id(self):
        """Gets the gateway_id of this SensorReading.  # noqa: E501


        :return: The gateway_id of this SensorReading.  # noqa: E501
        :rtype: float
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this SensorReading.


        :param gateway_id: The gateway_id of this SensorReading.  # noqa: E501
        :type: float
        """

        self._gateway_id = gateway_id

    @property
    def device_id(self):
        """Gets the device_id of this SensorReading.  # noqa: E501


        :return: The device_id of this SensorReading.  # noqa: E501
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this SensorReading.


        :param device_id: The device_id of this SensorReading.  # noqa: E501
        :type: float
        """

        self._device_id = device_id

    @property
    def sensor_device_id(self):
        """Gets the sensor_device_id of this SensorReading.  # noqa: E501


        :return: The sensor_device_id of this SensorReading.  # noqa: E501
        :rtype: str
        """
        return self._sensor_device_id

    @sensor_device_id.setter
    def sensor_device_id(self, sensor_device_id):
        """Sets the sensor_device_id of this SensorReading.


        :param sensor_device_id: The sensor_device_id of this SensorReading.  # noqa: E501
        :type: str
        """

        self._sensor_device_id = sensor_device_id

    @property
    def datapoint_id(self):
        """Gets the datapoint_id of this SensorReading.  # noqa: E501


        :return: The datapoint_id of this SensorReading.  # noqa: E501
        :rtype: float
        """
        return self._datapoint_id

    @datapoint_id.setter
    def datapoint_id(self, datapoint_id):
        """Sets the datapoint_id of this SensorReading.


        :param datapoint_id: The datapoint_id of this SensorReading.  # noqa: E501
        :type: float
        """

        self._datapoint_id = datapoint_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensorReading, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensorReading):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SensorReading):
            return True

        return self.to_dict() != other.to_dict()
